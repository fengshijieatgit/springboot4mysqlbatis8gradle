buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
        //添加maven仓库 mybatis-generetor
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // mybatis-generator 插件路径mybatis-generetor
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}
//配置从阿里云源下载依赖
allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
    }
}
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//引入 mybatis-generator 插件mybatis-generetor
apply plugin: "com.arenagod.gradle.MybatisGenerator"

group = 'com.jesse'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

war {
	baseName = 'springboot-xml'
	version = '0.0.1-SNAPSHOT'
}

repositories {
	mavenLocal()
	mavenCentral()
}


dependencies {
//	View 层
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
//	springboot 核心
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
//日志
	compile 'org.apache.commons:commons-lang3:3.1'
//	json需要的包
    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.47'
    //mybatis-geerator
//	MyBatis需要的包
    // https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core
    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.6'

	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

// mybatis-generator.xml 配置路径
mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/mybatis/generator.xml'
}
task wrapper(type: Wrapper) {
	gradleVersion = '4.0'
}

task cleanSqlmaps(type: Delete) {
	def files = fileTree("${buildDir}/classes/java", {
		include "**/*.xml"
	})
	delete files
}

task copySqlmaps(type: Copy, dependsOn: cleanSqlmaps) {
	from "${projectDir}/src/main/java"
	include "**/*.xml"
	into "${buildDir}/classes/java/main"
	includeEmptyDirs = false
}

processResources.dependsOn {
	copySqlmaps
}
